use.miden::account
use.miden::note
use.miden::contracts::wallets::basic->wallet

const.PLAYER_STATS_SLOTS=13
const.NO_OF_PLAYERS_INDEX=57
const.RAISER_INDEX=58
const.CURRENT_TURN_INDEX=60
const.HIGHEST_BET_SLOT_INDEX=61 
const.CURRENT_PHASE=62
const.PLAYER_CHECK_COUNTER=63
const.FIRST_PLAYER_INDEX=64

proc.update_current_turn

    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index]
    drop drop drop
    # => [current_turn_index]

    push.PLAYER_STATS_SLOTS add 
    # => [current_turn_index + 13]
    # => [next_turn_index]

    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 64 + 13 * (no_of_players - 1) + 0
    push.1 sub
    push.PLAYER_STATS_SLOTS mul
    push.FIRST_PLAYER_INDEX add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.10 add
        # => [next_turn_index + 10, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                push.1
                # => [1, first_player_index]
            end
        else 
            # if player has not folded
            dup mem_load.0 lte
            # => [0/1, next_turn_index]
            
            if.true
                # => [next_turn_index]
                padw drop
                # => [0, 0, 0, next_turn_index]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                padw drop
                # => [0, 0, 0, first_player_index]
            end
            
            dup.3 mem_store.1
            push.CURRENT_TURN_INDEX # slot of current turn
            # => [CURRENT_TURN_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]
end

proc.play_call

    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index]
    
    # dropping three zeroes 
    drop drop drop dup
    # => [current_turn_index, current_turn_index]

    push.3 add exec.account::get_item
    # => [0, 0, 0, player last bet, current_turn_index]
    drop drop drop
    # => [player last bet, current_turn_index]

    # when user wants to just call and match the bet
    push.HIGHEST_BET_SLOT_INDEX exec.account::get_item 
    # => [0, 0, 0, highest bet, player last bet, current_turn_index] 

    drop drop drop
    # => [highest bet, current bet, current_turn_index]

    swap sub 
    # => [highest bet - current bet, current_turn_index] subtract this amount from player balance 
    # => [difference, current_turn_index]

    swap dup movup.2 swap
    # => [current_turn_index, difference, current_turn_index]
    push.4 add exec.account::get_item
    drop drop drop
    # => [balance, difference, current_turn_index]

    swap sub
    # => [balance - difference, current_turn_index]
    swap padw drop movup.3
    # => [current_turn_index, 0, 0, 0, remaining balance]
    push.4 add 
    # => [current_turn_index + 4, 0, 0, 0, remaining balance]

    # => updated player balance 
    exec.account::set_item 
    dropw dropw

    # update player last bet
    push.HIGHEST_BET_SLOT_INDEX exec.account::get_item
    # => [0, 0, 0, highest bet]
    drop drop drop
    # => [highest bet]

    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index, highest bet]
    drop drop drop
    # => [current_turn_index, highest_bet]
    push.3 add
    # => [current_turn_index + 3, highest_bet]
    padw drop movup.3
    # => [current_turn_index + 3, 0, 0, 0, highest_bet]

    exec.account::set_item
    dropw dropw
    # => [...]

    # update current turn
    exec.update_current_turn

    # update current phase
    mem_load.1
    # => [next_turn_index]

    push.RAISER_INDEX exec.account::get_item
    # => [0, 0, 0, raiser_index, next_turn_index]
    drop drop drop
    # => [raiser_index, next_turn_index]

    eq
    # => [raiser_index == next_turn_index]

    if.true
        push.CURRENT_PHASE exec.account::get_item
        # => [0, 0, 0, current_phase]
        drop drop drop
        # => [current_phase]
        push.1 add
        # => [current_phase + 1]
        padw drop push.CURRENT_PHASE 
        exec.account::set_item
        debug.stack
        dropw drop drop

        # reset raiser index
        padw push.RAISER_INDEX
        exec.account::set_item
        dropw drop drop 

        # reset check count
        push.0 padw drop
        push.PLAYER_CHECK_COUNTER exec.account::set_item
        dropw drop drop 

        # update current turn
        push.FIRST_PLAYER_INDEX
        # => [first_player_index]

        dup push.10 add
        exec.account::get_item drop drop drop
        # => [is_fold, first_player_index]

        swap padw drop
        push.CURRENT_TURN_INDEX
        exec.account::set_item
        dropw dropw

        if.true
            exec.update_current_turn
        end
    end

    dropw drop drop drop
end


begin   
    dropw

    call.play_call
    # => [...]

    dropw
    exec.note::get_assets drop mem_loadw
    # => [ASSET, ...]

    # load the asset and add it to the account
    call.wallet::receive_asset
    # => [...]

    dropw
end