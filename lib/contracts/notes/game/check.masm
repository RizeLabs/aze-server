use.miden::account
use.miden::note
use.miden::contracts::wallets::basic->wallet

const.PLAYER_STATS_SLOTS=13
const.NO_OF_PLAYERS_INDEX=57
const.RAISER_INDEX=58
const.CURRENT_TURN_INDEX=60
const.CURRENT_PHASE=62
const.PLAYER_CHECK_COUNTER=63
const.FIRST_PLAYER_INDEX=64

proc.update_current_turn

    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index]
    drop drop drop
    # => [current_turn_index]

    push.PLAYER_STATS_SLOTS add 
    # => [current_turn_index + 13]
    # => [next_turn_index]

    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 64 + 13 * (no_of_players - 1) + 0
    push.1 sub
    push.PLAYER_STATS_SLOTS mul
    push.FIRST_PLAYER_INDEX add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.10 add
        # => [next_turn_index + 10, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                push.1
                # => [1, first_player_index]
            end
        else 
            # if player has not folded
            dup mem_load.0 lte
            # => [0/1, next_turn_index]
            
            if.true
                # => [next_turn_index]
                padw drop
                # => [0, 0, 0, next_turn_index]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                padw drop
                # => [0, 0, 0, first_player_index]
            end
            
            dup.3 mem_store.1
            push.CURRENT_TURN_INDEX # slot of current turn
            # => [CURRENT_TURN_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]
end

proc.play_check
    # => [...]
    # check whether previous players have checked or not
    push.0 push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index, 0]
    drop drop drop
    # => [current_turn_index, 0]
    dup mem_store.2
    push.FIRST_PLAYER_INDEX
    # => [first_player_index, current_turn_index, 0]
    dup.1 dup.1 neq
    # => [0/1, first_player_index, current_turn_index, 0]

    while.true 
        # => [first_player_index, current_turn_index, active_players_before_current]
        dup push.10 add exec.account::get_item
        drop drop drop
        # => [is_fold, first_player_index, current_turn_index, active_players_before_current]

        if.true
            push.1 drop
            # => [first_player_index, current_turn_index, active_players_before_current]
        else
            movup.2 push.1 add movdn.2
            # => [first_player_index, current_turn_index, active_players_before_current]
        end

        push.PLAYER_STATS_SLOTS add
        # => [first_player_index + 13, current_turn_index, active_players_before_current]
        dup.1 dup.1 neq
        # => [0/1, first_player_index + 13, current_turn_index, active_players_before_current]
    end
    
    drop drop
    # => [active_players_before_current]
    push.PLAYER_CHECK_COUNTER exec.account::get_item
    drop drop drop
    # => [player_check_counter, active_players_before_current]
    swap dup.1 eq
    # => [0/1, player_check_counter]

    if.true
        push.1 add
        # => [player_check_counter + 1]
        padw drop push.PLAYER_CHECK_COUNTER
        exec.account::set_item
        dropw dropw
        # => [...]
    else
        drop
        # => [...]
    end

    # need to update the turn of the player
    exec.update_current_turn

    # check if check_counter == no. of active players
    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop dup
    # => [no_of_players, no_of_players]
    push.1 
    # => [1, no_of_players, no_of_players]

    while.true
        dup
        # => [no_of_players, no_of_players, no_of_players]
        push.1 sub
        push.PLAYER_STATS_SLOTS mul
        push.FIRST_PLAYER_INDEX add
        # => [player_index, no_of_players, no_of_players]

        push.10 add exec.account::get_item
        drop drop drop
        # => [is_fold, no_of_players, no_of_players]

        if.true
            swap push.1 sub swap
            # => [no_of_players, active_players]
        end

        push.1 sub dup
        push.0 gt
        # => [0/1, no_of_players - 1, active_players]
    end

    # => [0, active_players]
    drop
    push.PLAYER_CHECK_COUNTER exec.account::get_item
    # => [0, 0, 0, player_check_counter]
    drop drop drop
    # => [player_check_counter, active_players]
    eq
    # => [0/1]

    # if current player is big blind, allow to check
    mem_load.2
    # => [current_turn_index, 0/1]

    # compare with big blind index
    push.FIRST_PLAYER_INDEX
    push.PLAYER_STATS_SLOTS add
    # => [big_blind_index, current_turn_index, 0/1]

    eq
    # => [0/1, 0/1]

    if.true
        # check if current phase is pre-flop
        push.CURRENT_PHASE exec.account::get_item
        # => [0, 0, 0, current_phase]
        drop drop drop
        # => [current_phase]
        push.0 eq
        # => [0/1]

        if.true
            drop push.1
            debug.stack
            # => [1]
        end
    end 

    if.true
        push.CURRENT_PHASE exec.account::get_item
        # => [0, 0, 0, current_phase]
        drop drop drop
        # => [current_phase]
        push.1 add
        # => [current_phase + 1]
        padw drop push.CURRENT_PHASE 
        exec.account::set_item
        dropw dropw

        # reset check count
        push.0 padw drop
        push.PLAYER_CHECK_COUNTER exec.account::set_item
        dropw dropw

        # update current turn
        push.FIRST_PLAYER_INDEX
        # => [first_player_index]

        dup push.10 add
        exec.account::get_item drop drop drop
        # => [is_fold, first_player_index]

        swap padw drop
        push.CURRENT_TURN_INDEX
        exec.account::set_item
        dropw drop drop drop

        if.true
            exec.update_current_turn
        end
    end

    drop
end

begin 
    dropw

    call.play_check
    # => [...]

    dropw
    exec.note::get_assets drop mem_loadw
    # => [ASSET, ...]

    # load the asset and add it to the account
    call.wallet::receive_asset
    # => [...]

    dropw
end