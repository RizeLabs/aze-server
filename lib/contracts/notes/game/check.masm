use.miden::account
use.miden::note
use.miden::contracts::wallets::basic->wallet

const.NO_OF_PLAYERS_INDEX=57
const.CURRENT_TURN_PLAYER_PUB_KEY_INDEX=60
const.PLAYER_STATS_SLOTS=13
const.CARDS_SLOTS=52
const.PLAYER_CHECK_COUNTER=63

proc.play_check
    # => [...]
    push.PLAYER_CHECK_COUNTER exec.account::get_item
    # => [0, 0, 0, player_check_counter]
    drop drop drop
    # => [player_check_counter]

    # check whether previous players have checked or not
    dup push.1 add
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_player_pub_key_index, player_check_counter + 1, player_check_counter]
    drop drop drop
    # => [current_turn_player_pub_key_index, player_check_counter + 1, player_check_counter]
    push.CARDS_SLOTS sub
    push.PLAYER_STATS_SLOTS div
    # => [player no., player_check_counter + 1, player_check_counter]
    eq
    # => [0/1, player_check_counter]

    if.true
        push.1 add
        # => [player_check_counter + 1]
    else
        drop
        # => [...]
    end

    padw drop push.PLAYER_CHECK_COUNTER
    exec.account::set_item
    dropw dropw
    # => [...]

    # need to update the turn of the player
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_player_pub_key_index]
    drop drop drop
    # => [current_turn_player_pub_key_index]

    push.PLAYER_STATS_SLOTS add 
    # => [current_turn_player_pub_key_index + 13]
    # => [next_turn_index]

    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 52 + 13 * no_of_players + 0
    push.PLAYER_STATS_SLOTS mul
    push.CARDS_SLOTS add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.9 add
        # => [next_turn_index + 9, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                push.0
            end
        else 
            # checking is fold
            # => [next_turn_index]

            padw drop
            # => [0, 0, 0, next_turn_index]

            push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX # slot of current turn
            # => [CURRENT_TURN_PLAYER_PUB_KEY_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]
end

begin 
    dropw

    call.play_check
    # => [...]

    dropw
    exec.note::get_assets drop mem_loadw
    # => [ASSET, ...]

    # load the asset and add it to the account
    call.wallet::receive_asset
    # => [...]

    dropw
end