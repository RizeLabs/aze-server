use.miden::account
use.miden::tx
use.std::crypto::dsa::rpo_falcon512
use.miden::contracts::wallets::basic->basic_wallet
use.miden::contracts::auth::basic

const.PLAYER_STATS_SLOTS=13
const.SMALL_BLIND_INDEX=54
const.BIG_BLIND_INDEX=55
const.BUY_IN_INDEX=56
const.NO_OF_PLAYERS_INDEX=57
const.RAISER_INDEX=58
const.HIGHEST_BET_SLOT_INDEX=61 # highest bet amount which player will try to match with call
const.CURRENT_TURN_INDEX=60 # index of the player whose turn it is currently
const.CURRENT_TURN_PLAYER_PUB_KEY_INDEX=60 # need to check it's storage initially small blind public key on slot 62
const.CURRENT_PHASE=62 # whole game is divided into 4 phases
const.PLAYER_CHECK_COUNTER=63 
const.FIRST_PLAYER_INDEX=64
const.CARDS_SLOTS=52

# game events 
# TODO: fix some storage for the value corresponding to these events 
const.PLAYER_BETTED_AMOUNT=169 # check slot (169 - 100) 
const.NEXT_PLAYER_TURN=170 # check slot (170 - 100)
const.CARD_REVEALED=171 # check slot (171 - 100)
const.NEW_HIGHEST_BET=172 # check slot (172 - 100)
const.BALANCE_UPDATED=173 # check slot (173 - 100)
const.PLAYER_ACTION=174 # check slot (174 - 100)
const.GAME_ENDED=175 # check slot (175 - 100)

# enable authentication for players (although accounts are custodial for now)
export.poker_auth_tx_rpo_falcon512
    # Get commitments to created notes
    exec.tx::get_output_notes_hash
    # => [OUTPUT_NOTES_HASH, ...]

    # Get commitments to consumed notes
    exec.tx::get_input_notes_hash
    # => [INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Get current nonce of the account and pad
    exec.account::get_nonce push.0.0.0
    # => [0, 0, 0, nonce, INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Get current AccountID and pad
    exec.account::get_id push.0.0.0
    # => [0, 0, 0, account_id, 0, 0, 0, nonce, INPUT_NOTES_HASH, OUTPUT_NOTES_HASH, ...]

    # Compute the message to be signed
    # M = h(OUTPUT_NOTES_HASH, h(INPUT_NOTES_HASH, h(0, 0, 0, account_id, 0, 0, 0, nonce)))
    hmerge hmerge hmerge

    # Get public key from account storage at pos 0 and verify signature
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [PUB_KEY, M]

    # Verify the signature against the public key and the message. The procedure gets as
    # inputs the hash of the public key and the hash of the message via the operand
    # stack. The signature is provided via the advice stack. The signature is valid if and
    # only if the procedure returns.
    exec.rpo_falcon512::verify
    # => []

    # Update the nonce
    push.1 exec.account::incr_nonce
    # => []
end

export.update_current_turn

    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index]
    drop drop drop
    # => [current_turn_index]

    push.PLAYER_STATS_SLOTS add 
    # => [current_turn_index + 13]
    # => [next_turn_index]

    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 64 + 13 * (no_of_players - 1) + 0
    push.1 sub
    push.PLAYER_STATS_SLOTS mul
    push.FIRST_PLAYER_INDEX add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.10 add
        # => [next_turn_index + 10, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                push.1
                # => [1, first_player_index]
            end
        else 
            # if player has not folded
            dup mem_load.0 lte
            # => [0/1, next_turn_index]
            
            if.true
                # => [next_turn_index]
                padw drop
                # => [0, 0, 0, next_turn_index]
            else 
                # Rotate turn
                push.FIRST_PLAYER_INDEX
                padw drop
                # => [0, 0, 0, first_player_index]
            end
            
            dup.3 mem_store.1
            push.CURRENT_TURN_INDEX # slot of current turn
            # => [CURRENT_TURN_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]
end

export.play_call

    # although we will enforce this checks from frontend but it's go to have certain require here
    # TODO: checks the player isn't folded 
    # TODO: checks the player has enough amount for matching bet
    # TODO: checks the first player can't go for check  

    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [0, 0, 0, pub key index of current player]
    
    # dropping three zeroes 
    drop drop drop dup
    # => [pub key index of current player, pub key index of current player]

    push.2 add exec.account::get_item
    # => [0, 0, 0, player last bet, pub key index of current player]
    drop drop drop
    # => [player last bet, pub key index of current player]

    # when user wants to just call and match the bet
    push.HIGHEST_BET_SLOT_INDEX exec.account::get_item 
    # => [0, 0, 0, highest bet, player last bet, pub key index of current player] 

    drop drop drop
    # => [highest bet, current bet, pub key index of current player]

    swap sub 
    # => [highest bet - current bet, pub key index of current player] subtract this amount from player balance 
    # => [difference, pub key index of current player]

    swap dup movup.2 swap
    # => [current player pub key index, difference, current player pub key index]
    push.3 add exec.account::get_item
    drop drop drop
    # => [balance, difference, current player pub key index]

    swap sub
    # => [balance - difference, current player pub key index]
    swap padw drop movup.3
    # => [current player pub key index, 0, 0, 0, remaining balance]
    push.3 add 
    # => [current player pub key index + 3, 0, 0, 0, remaining balance]

    # => updated player balance 
    exec.account::set_item 
    dropw dropw

    # TODO: need to add procedure for updating player turns
end

# need to setup asm build first for this 
# export.poker::play_call
# export.poker::play_raise
# export.poker::play_fold
# export.poker::play_check

export.play_raise

    # Tasks need to be performed:
    # - get raise amount âœ…
    # - update highest bet slot 62 âœ…
    # - update raiser âœ…
    # - update the remaining balance of player âœ…
    # - update player bet = 0 ??
    # - update the pot value ?? 
    # - update phase/round n sum âœ…
    # - increase the slot to next player who is playing ğŸ‘€

    # => [player_bet]
    dup mem_store.0
    # => [player_bet]
    
    padw drop push.HIGHEST_BET_SLOT_INDEX
    exec.account::set_item
    dropw dropw
    # => []

    mem_load.0
    # => [player_bet]

    ## raise amount = current player bet - it should be (bet amount - last call amount) ??
    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current turn index, player_bet]

    drop drop drop
    # => [current turn index, player_bet]

    push.3 add
    # => [current turn index + 3, player_bet]
    dup mem_store.1
    # => [current turn index + 3, player_bet]

    padw drop movup.3
    exec.account::set_item
    dropw dropw
    # => []

    ## update raiser
    mem_load.1 push.3 sub
    # => [current turn index]

    padw drop push.RAISER_INDEX
    #[RAISER_INDEX, 0, 0, 0, current turn index]

    exec.account::set_item
    dropw dropw 
    #[]

    ## update the remaining balance of player 

    push.CURRENT_TURN_INDEX exec.account::get_item drop drop drop
    # [current turn index]

    push.4 add
    # [current turn index + 4]

    dup
    # [current turn index + 4, current turn index + 4]

    exec.account::get_item drop drop drop 
    # [player_remaining_balance, current turn index + 4]

    push.HIGHEST_BET_SLOT_INDEX
    # [HIGHEST_BET_SLOT_INDEX, player_remaining_balance, current turn index + 4]

    exec.account::get_item drop drop drop 
    # [player_bet, player_remaining_balance, current turn index + 4] -> ig here we need player_remaining_balance and then player_bet or we need to take it's absolute value
    
    dup.1 dup.1 gte assert
    # [0/1, player_bet, player_remaining_balance, current turn index + 4]
    # [player_bet, player_remaining_balance, current turn index + 4]

    sub
    # [player_balance_after_bet, current turn index + 4]

    swap
    # [current turn index + 4, player_balance_after_bet]

    padw drop movup.3
    # [current turn index + 4, 0, 0, 0, player_balance_after_bet]
    exec.account::set_item
    dropw dropw
    # []

    exec.update_current_turn
end


export.play_fold
    # make is_fold of player 1
    # inc turn
    push.CURRENT_TURN_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_index]

    drop drop drop
    # => [current_turn_index]

    push.9
    # 9, current_turn_index
    add
    # => [current_turn_index + 9]
    dup #for getting the get item
    dup #for updating the turn
    # => [current_turn_index + 9, current_turn_index + 9, current_turn_index + 9]

    # getting the is_fold of player
    exec.account::get_item
    drop drop drop
    # => [is_fold, current_turn_index + 9, current_turn_index + 9]
    
    # making sure that is_fold is zero currently
    assertz
    # => [current_turn_index + 9, current_turn_index + 9]
    push.1
    # => [1, current_turn_index + 9, current_turn_index + 9]
    
    swap padw drop movup.3
    # => [current_turn_index + 9, 0, 0, 0, 1, current_turn_index + 9]
    exec.account::set_item
    dropw drop drop drop
    # => [current_turn_index + 9]

    # adding 4 will give the slot of next player 
    push.4 add
    # => [next_turn_index]

    # find last player's index
    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 52 + 13 * no_of_players + 0
    push.PLAYER_STATS_SLOTS mul
    push.CARDS_SLOTS add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.9 add
        # => [next_turn_index + 9, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                push.0
            end
        else 
            # checking is fold
            # => [next_turn_index]

            padw drop
            # => [0, 0, 0, next_turn_index]

            push.CURRENT_TURN_INDEX # slot of current turn
            # => [CURRENT_TURN_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]
end

export.play_check

    # => [...]
    push.PLAYER_CHECK_COUNTER exec.account::get_item
    # => [0, 0, 0, player_check_counter]
    drop drop drop
    # => [player_check_counter]

    # check whether previous players have checked or not
    dup push.1 add
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_player_pub_key_index, player_check_counter + 1, player_check_counter]
    drop drop drop
    # => [current_turn_player_pub_key_index, player_check_counter + 1, player_check_counter]
    push.CARDS_SLOTS sub
    push.PLAYER_STATS_SLOTS div
    # => [player no., player_check_counter + 1, player_check_counter]
    eq
    # => [0/1, player_check_counter]

    if.true
        push.1 add
        # => [player_check_counter + 1]
    else
        drop
        # => [...]
    end

    padw drop push.PLAYER_CHECK_COUNTER
    exec.account::set_item
    dropw dropw
    # => [...]

    # need to update the turn of the player
    push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX exec.account::get_item
    # => [0, 0, 0, current_turn_player_pub_key_index]
    drop drop drop
    # => [current_turn_player_pub_key_index]

    push.PLAYER_STATS_SLOTS add 
    # => [current_turn_player_pub_key_index + 13]
    # => [next_turn_index]

    push.NO_OF_PLAYERS_INDEX exec.account::get_item
    drop drop drop
    # => [no_of_players, next_turn_index]

    # Calculate last_player_index = 52 + 13 * no_of_players + 0
    push.PLAYER_STATS_SLOTS mul
    push.CARDS_SLOTS add
    # => [last_player_index, next_turn_index]

    mem_store.0
    # => [next_turn_index]

    push.1
    # => [1, next_turn_index]

    while.true

        dup push.9 add
        # => [next_turn_index + 9, next_turn_index]
        exec.account::get_item
        drop drop drop
        # => [is_fold, next_turn_index]

        if.true  
            # if player has folded
            dup mem_load.0 lt
            # => [0/1, next_turn_index]

            if.true
                push.PLAYER_STATS_SLOTS add 
                push.1
                # => [1, next_turn_index + 13]
            else 
                push.0
            end
        else 
            # checking is fold
            # => [next_turn_index]

            padw drop
            # => [0, 0, 0, next_turn_index]

            push.CURRENT_TURN_PLAYER_PUB_KEY_INDEX # slot of current turn
            # => [CURRENT_TURN_PLAYER_PUB_KEY_INDEX, 0, 0, 0, next_turn_index]

            exec.account::set_item 
            dropw dropw
            # => [...]
            push.0
        end
    end
    dropw
    # => [...]

end


# some basic account methods 

export.basic_wallet::receive_asset
export.basic_wallet::send_asset
export.basic::auth_tx_rpo_falcon512
